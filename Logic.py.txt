#
# Note that written answers are commented out to allow us to run your
# code easily while grading your problem set.
import random

import random
import constants as c

#######
@@ -18,12 +18,10 @@
# Matrix elements must be equal but not identical
# 1 mark for creating the correct matrix


def new_game(n):
    matrix = []
    for i in range(n):
        matrix.append([0] * n)

    matrix = add_two(matrix)
    matrix = add_two(matrix)
    return matrix
@@ -37,7 +35,6 @@ def new_game(n):
# Must ensure that it is created on a zero entry
# 1 mark for creating the correct loop


def add_two(mat):
    a = random.randint(0, len(mat)-1)
    b = random.randint(0, len(mat)-1)
@@ -59,7 +56,6 @@ def add_two(mat):
# 2 marks for getting two of the three conditions
# 3 marks for correct checking


def game_state(mat):
    # check for win cell
    for i in range(len(mat)):
@@ -96,7 +92,6 @@ def game_state(mat):
# 1 mark for solutions that show general understanding
# 2 marks for correct solutions that work for all sizes of matrices


def reverse(mat):
    new = []
    for i in range(len(mat)):
@@ -115,7 +110,6 @@ def reverse(mat):
# 1 mark for solutions that show general understanding
# 2 marks for correct solutions that work for all sizes of matrices


def transpose(mat):
    new = []
    for i in range(len(mat[0])):
@@ -137,7 +131,6 @@ def transpose(mat):
# 2 per up/down/left/right?) But if you get one correct likely to get all correct so...
# Check the down one. Reverse/transpose if ordered wrongly will give you wrong result.


def cover_up(mat):
    new = []
    for j in range(c.GRID_LEN):
@@ -156,7 +149,6 @@ def cover_up(mat):
                count += 1
    return new, done


def merge(mat, done):
    for i in range(c.GRID_LEN):
        for j in range(c.GRID_LEN-1):
@@ -166,7 +158,6 @@ def merge(mat, done):
                done = True
    return mat, done


def up(game):
    print("up")
    # return matrix after shifting up
@@ -177,17 +168,16 @@ def up(game):
    game = transpose(game)
    return game, done


def down(game):
    print("down")
    # return matrix after shifting down
    game = reverse(transpose(game))
    game, done = cover_up(game)
    game, done = merge(game, done)
    game = cover_up(game)[0]
    game = transpose(reverse(game))
    return game, done


def left(game):
    print("left")
    # return matrix after shifting left
@@ -196,7 +186,6 @@ def left(game):
    game = cover_up(game)[0]
    return game, done


def right(game):
    print("right")
    # return matrix after shifting right
@@ -205,4 +194,4 @@ def right(game):
    game, done = merge(game, done)
    game = cover_up(game)[0]
    game = reverse(game)
    return game, done
    return game, done 